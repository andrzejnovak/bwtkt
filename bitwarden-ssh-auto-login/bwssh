#!/usr/bin/env bash
echo "Bitwarden SSH auto-login wrapper"
SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

if [[ "$(which bw)" == "" ]]; then
	echo >&2 "bw command required!"
	echo >&2 "Install via https://github.com/bitwarden/cli"
	return
fi

cmd=${@:1}
useConf=0
confLine=""

confirmBwssh() {
	read -p "Exec [$cmd] with bitwarden credential? [Y/n] " confirm </dev/tty
	echo ''
	if [[ "$confirm" == "" || "$confirm" == "Y" || "$confirm" == "y" ]]; then
		echo 1
	elif [[ "$confirm" == "N" || "$confirm" == "n" ]]; then
		echo 0
	else
		confirmBwssh
	fi
}

doBwssh() {
	host=$1
	objectId=$2

	# Check if bw function is available
	if type bw >/dev/null 2>&1 && [[ "$(type -t bw)" == "function" ]]; then
		echo "Using bw wrapper function for credentials..."
		
		# Check if the session file that our bw wrapper uses exists
		local session_file='/var/root/.bitwarden.session'
		if [[ ! -f "$session_file" ]]; then
			echo "No Bitwarden session file found. Regenerating session key..."
			if ! bw --regenerate-session-key; then
				echo "Failed to regenerate session."
				return 1
			fi
			echo "Session regenerated successfully."
		fi
		
		# Test session validity and get credentials
		echo "Retrieving credentials..."
		
		# Try to get password - capture both output and exit code
		local output
		if output=$(bw get password $objectId 2>&1); then
			# Command succeeded, we have the password
			local password="$output"
		else
			# Command failed, check if it's a session issue
			if [[ "$output" =~ (Invalid master password|Session key is invalid|mac failed|You are not logged in) ]]; then
				echo "Session invalid or missing. Regenerating session..."
				# Call regeneration interactively (not in command substitution)
				if bw --regenerate-session-key; then
					echo "Session regenerated, retrying credential retrieval..."
					# Try again after regeneration
					if output=$(bw get password $objectId 2>&1); then
						local password="$output"
					else
						echo "Failed to get password even after session regeneration."
						return 1
					fi
				else
					echo "Failed to regenerate session."
					return 1
				fi
			else
				echo "Failed to get password for unknown reason:"
				echo "$output"
				return 1
			fi
		fi
		
		# Get TOTP - session should be valid now
		local pin=$(bw get totp $objectId 2>/dev/null)
	else
		echo "bw wrapper function not available, using raw bw command..."
		# Fall back to raw bw command
		local password=$(command bw get password $objectId 2>/dev/null)
		local pin=$(command bw get totp $objectId 2>/dev/null)
	fi
	
	if [[ -z "$password" ]]; then
		echo "Failed to get password for object ID: $objectId"
		echo "This might indicate:"
		echo "  1. You're not logged into Bitwarden (run: bw --regenerate-session-key)"
		echo "  2. Invalid object ID: $objectId"
		echo "  3. Object doesn't exist or you don't have access"
		echo "  4. Expired session (run: bw --regenerate-session-key)"
		return 1
	fi

	expect ${SCRIPT_DIR}/bwssh.expect "$cmd" "$password" "$pin"
}

if [[ ! -f ~/.bwssh ]]; then
	echo >&2 "Waring: This command only works when ssh host & bitwarden object id specified in ~/.bwssh"
	$cmd
	return
fi

while read line; do
	if [[ "$(echo $line | grep '^#')" != "" ]]; then
		continue
	fi
	conf=($(echo $line | tr ',' "\n"))
	host=${conf[0]}
	objectId=${conf[1]}
	if [[ "$host" == "" || "$objectId" == "" ]]; then
		continue
	fi
	if [[ "$(echo $cmd | grep $host)" != "" ]]; then
		if [[ "$(confirmBwssh | tail -1)" == "1" ]]; then
			useConf=1
			confLine=$line
		fi
	fi
done <  <(grep . ~/.bwssh)

if [[ "$useConf" == "0" ]]; then
	$cmd
else
	doBwssh $confLine
fi
